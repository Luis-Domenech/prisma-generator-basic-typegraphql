datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode  = "prisma"
}

generator client {
  provider  = "prisma-client-js"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "../src/generated/dbml/"
  // Can be used in https://dbdiagram.io/d
  outputName = "schema.dbml"
}

generator basic_typegraphql {
  // provider          = "node ../../node_modules/prisma-generator-basic-typegraphql"
  // provider          = "node ../../node_modules/my-generator"
  provider          = "prisma-generator-basic-typegraphql"
  // provider          = "my-generator"
  output            = "../src/generated/type-graphql-types"
  outputName        = "index.ts"
  wipeOutput        = true
  useYarn           = true
  optionalRelations = true
  strictModifiers   = true
  skipVerCheck      = false
  installDeps       = true
  enumAsType        = false
  enumAsConst       = true
  addNull           = true
  addTypenameField  = true
}

model TestScalarsRequired {
  id        String  @id @unique
  big_int   BigInt
  boolean   Boolean
  bytes     Bytes
  datetime  DateTime
  decimal   Decimal
  float     Float
  int       Int
  json      Json
  string    String
}

model TestScalarsOptional {
  id        String  @id @unique
  big_int   BigInt? 
  boolean   Boolean?
  bytes     Bytes?
  datetime  DateTime?
  decimal   Decimal?
  float     Float?
  int       Int?
  json      Json?
  string    String?
}

model TestEnumsRequired {
  id                String  @unique
  notification_type NotificationType
  langauge          Language
}

model TestEnumsOptional {
  id                String  @unique
  notification_type NotificationType?
  langauge          Language?
}

model TestRelational {
  id      String  @unique
  user    User?
  posts   Post[]
}

model TestOmits {
  id    String  @unique
  /// @omit always
  test1 String
  // @omit omits iff strictModifiers is false
  test2 String
  test3 String  /// @omit omits iff strictModifiers is false
  test4 String  //  @omit omits iff strictModifiers is false
}

model User {
  id                  Int     @id @default(autoincrement())
  email               String  @unique
  name                String?
  post                Post[]
  /// @omit
  password            String
  test_relational     TestRelational  @relation(fields: [test_relational_id], references: [id])
  test_relational_id  String  @unique
}

model Post {
  id                  Int   @id @default(autoincrement())
  content             String
  user                User  @relation(fields: [user_id], references: [id])
  user_id             Int
  test_relational     TestRelational  @relation(fields: [test_relational_id], references: [id])
  test_relational_id  String  @unique

  @@index([user_id])
}

enum NotificationType {
  newPosts
  newComments
  newFollowers
  reply
  heartOnPost
  heartOnComment
  heartOnReply
}

enum Language {
  Typescript
  Javascript
  Rust
  Go
  Python
  Cpp
}